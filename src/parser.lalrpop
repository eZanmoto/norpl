// Copyright 2021 Sean Kelleher. All rights reserved.
// Use of this source code is governed by an MIT
// licence that can be found in the LICENCE file.

use ast::*;

grammar;

pub Prog: Prog = {
    <stmts:Stmt*> => Prog::Body{stmts},
}

pub Stmt: Stmt = {
    <expr:Expr> ";" => Stmt::Expr{expr},

    <lhs:Expr> "=" <rhs:Expr> ";" => Stmt::Assign{lhs, rhs},
    <name:Ident> "+=" <rhs:Expr> ";" => Stmt::OpAssign{name, op: Op::Plus, rhs},

    <stmt:IfStmt> => stmt,
    "while" <cond:Expr> "{" <stmts:Stmt*> "}" => Stmt::While{cond, stmts},
}

pub IfStmt: Stmt = {
    "if" <cond:Expr> "{" <if_stmts:Stmt*> "}" =>
        Stmt::If{cond, if_stmts, else_stmts: None},
    "if" <cond:Expr> "{" <if_stmts:Stmt*> "}" "else" "{" <else_stmts:Stmt*> "}" =>
        Stmt::If{cond, if_stmts, else_stmts: Some(else_stmts)},
}

pub Expr: Expr = {
    <lhs:Expr> "<" <rhs:Expr_> => Expr::Op{lhs: Box::new(lhs), rhs: Box::new(rhs)},
    <expr:Expr_> => expr,
}

pub Expr_: Expr = {
    <name:Ident> => Expr::Var{name},
    <n:IntLiteral> => Expr::Int{n},
    <s:StrLiteral> => Expr::Str{s},

    <func:Ident> "(" <arg:Expr> ")" => Expr::Call{func, args: vec![arg]},

    "[" <xs:ExprList> "]" => Expr::List{xs},
}

pub ExprList: Vec<ListItem> = {
    () => vec![],
    <unspread:".."?> <head:Expr> <spread:".."?> => vec![ListItem{
        expr: head,
        is_spread: spread.is_some(),
        is_unspread: unspread.is_some(),
    }],
    <head:Expr> <spread:".."?> "," <tail:ExprList> => {
        let mut list = tail.clone();
        let head_ = ListItem{
            expr: head,
            is_spread: spread.is_some(),
            is_unspread: false,
        };
        list.insert(0, head_);

        list
    },
}

Ident: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string(),
};

StrLiteral: String = {
    <s:r"'[^']*'"> => s.trim_matches('\'').to_string(),
};

IntLiteral: i64 = {
    <s:r"[0-9]+"> => s.parse().unwrap(),
};

match {
    r"\s*" => {},
    r"#[^\n\r]*[\n\r]*" => {},
    _,
}
